// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_role_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpRoleApiClient is the client API for OcpRoleApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpRoleApiClient interface {
	ListRolesV1(ctx context.Context, in *ListRolesV1Request, opts ...grpc.CallOption) (*ListRolesV1Response, error)
	DescribeRoleV1(ctx context.Context, in *DescribeRoleV1Request, opts ...grpc.CallOption) (*DescribeRoleV1Response, error)
	CreateRoleV1(ctx context.Context, in *CreateRoleV1Request, opts ...grpc.CallOption) (*CreateRoleV1Response, error)
	RemoveRoleV1(ctx context.Context, in *RemoveRoleV1Request, opts ...grpc.CallOption) (*RemoveRoleV1Response, error)
}

type ocpRoleApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpRoleApiClient(cc grpc.ClientConnInterface) OcpRoleApiClient {
	return &ocpRoleApiClient{cc}
}

func (c *ocpRoleApiClient) ListRolesV1(ctx context.Context, in *ListRolesV1Request, opts ...grpc.CallOption) (*ListRolesV1Response, error) {
	out := new(ListRolesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.role.api.OcpRoleApi/ListRolesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoleApiClient) DescribeRoleV1(ctx context.Context, in *DescribeRoleV1Request, opts ...grpc.CallOption) (*DescribeRoleV1Response, error) {
	out := new(DescribeRoleV1Response)
	err := c.cc.Invoke(ctx, "/ocp.role.api.OcpRoleApi/DescribeRoleV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoleApiClient) CreateRoleV1(ctx context.Context, in *CreateRoleV1Request, opts ...grpc.CallOption) (*CreateRoleV1Response, error) {
	out := new(CreateRoleV1Response)
	err := c.cc.Invoke(ctx, "/ocp.role.api.OcpRoleApi/CreateRoleV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoleApiClient) RemoveRoleV1(ctx context.Context, in *RemoveRoleV1Request, opts ...grpc.CallOption) (*RemoveRoleV1Response, error) {
	out := new(RemoveRoleV1Response)
	err := c.cc.Invoke(ctx, "/ocp.role.api.OcpRoleApi/RemoveRoleV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpRoleApiServer is the server API for OcpRoleApi service.
// All implementations must embed UnimplementedOcpRoleApiServer
// for forward compatibility
type OcpRoleApiServer interface {
	ListRolesV1(context.Context, *ListRolesV1Request) (*ListRolesV1Response, error)
	DescribeRoleV1(context.Context, *DescribeRoleV1Request) (*DescribeRoleV1Response, error)
	CreateRoleV1(context.Context, *CreateRoleV1Request) (*CreateRoleV1Response, error)
	RemoveRoleV1(context.Context, *RemoveRoleV1Request) (*RemoveRoleV1Response, error)
	mustEmbedUnimplementedOcpRoleApiServer()
}

// UnimplementedOcpRoleApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpRoleApiServer struct {
}

func (UnimplementedOcpRoleApiServer) ListRolesV1(context.Context, *ListRolesV1Request) (*ListRolesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesV1 not implemented")
}
func (UnimplementedOcpRoleApiServer) DescribeRoleV1(context.Context, *DescribeRoleV1Request) (*DescribeRoleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRoleV1 not implemented")
}
func (UnimplementedOcpRoleApiServer) CreateRoleV1(context.Context, *CreateRoleV1Request) (*CreateRoleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleV1 not implemented")
}
func (UnimplementedOcpRoleApiServer) RemoveRoleV1(context.Context, *RemoveRoleV1Request) (*RemoveRoleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleV1 not implemented")
}
func (UnimplementedOcpRoleApiServer) mustEmbedUnimplementedOcpRoleApiServer() {}

// UnsafeOcpRoleApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpRoleApiServer will
// result in compilation errors.
type UnsafeOcpRoleApiServer interface {
	mustEmbedUnimplementedOcpRoleApiServer()
}

func RegisterOcpRoleApiServer(s grpc.ServiceRegistrar, srv OcpRoleApiServer) {
	s.RegisterService(&OcpRoleApi_ServiceDesc, srv)
}

func _OcpRoleApi_ListRolesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoleApiServer).ListRolesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.role.api.OcpRoleApi/ListRolesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoleApiServer).ListRolesV1(ctx, req.(*ListRolesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoleApi_DescribeRoleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRoleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoleApiServer).DescribeRoleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.role.api.OcpRoleApi/DescribeRoleV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoleApiServer).DescribeRoleV1(ctx, req.(*DescribeRoleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoleApi_CreateRoleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoleApiServer).CreateRoleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.role.api.OcpRoleApi/CreateRoleV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoleApiServer).CreateRoleV1(ctx, req.(*CreateRoleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoleApi_RemoveRoleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoleApiServer).RemoveRoleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.role.api.OcpRoleApi/RemoveRoleV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoleApiServer).RemoveRoleV1(ctx, req.(*RemoveRoleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpRoleApi_ServiceDesc is the grpc.ServiceDesc for OcpRoleApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpRoleApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.role.api.OcpRoleApi",
	HandlerType: (*OcpRoleApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRolesV1",
			Handler:    _OcpRoleApi_ListRolesV1_Handler,
		},
		{
			MethodName: "DescribeRoleV1",
			Handler:    _OcpRoleApi_DescribeRoleV1_Handler,
		},
		{
			MethodName: "CreateRoleV1",
			Handler:    _OcpRoleApi_CreateRoleV1_Handler,
		},
		{
			MethodName: "RemoveRoleV1",
			Handler:    _OcpRoleApi_RemoveRoleV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-role-api/ocp-role-api.proto",
}
