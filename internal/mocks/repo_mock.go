// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-role-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozoncp/ocp-role-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockRepo) AddRole(arg0 context.Context, arg1 *model.Role) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole.
func (mr *MockRepoMockRecorder) AddRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockRepo)(nil).AddRole), arg0, arg1)
}

// AddRoles mocks base method.
func (m *MockRepo) AddRoles(arg0 context.Context, arg1 []*model.Role) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoles", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoles indicates an expected call of AddRoles.
func (mr *MockRepoMockRecorder) AddRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoles", reflect.TypeOf((*MockRepo)(nil).AddRoles), arg0, arg1)
}

// DescribeRole mocks base method.
func (m *MockRepo) DescribeRole(arg0 context.Context, arg1 uint64) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRole", arg0, arg1)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRole indicates an expected call of DescribeRole.
func (mr *MockRepoMockRecorder) DescribeRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRole", reflect.TypeOf((*MockRepo)(nil).DescribeRole), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockRepo) ListRoles(arg0 context.Context, arg1, arg2 uint64) ([]*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRepoMockRecorder) ListRoles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRepo)(nil).ListRoles), arg0, arg1, arg2)
}

// RemoveRole mocks base method.
func (m *MockRepo) RemoveRole(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockRepoMockRecorder) RemoveRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockRepo)(nil).RemoveRole), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockRepo) UpdateRole(arg0 context.Context, arg1 *model.Role) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRepoMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRepo)(nil).UpdateRole), arg0, arg1)
}
