// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-role-api/internal/api (interfaces: ApiServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ocp_role_api "github.com/ozoncp/ocp-role-api/pkg/ocp-role-api"
)

// MockApiServer is a mock of ApiServer interface.
type MockApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockApiServerMockRecorder
}

// MockApiServerMockRecorder is the mock recorder for MockApiServer.
type MockApiServerMockRecorder struct {
	mock *MockApiServer
}

// NewMockApiServer creates a new mock instance.
func NewMockApiServer(ctrl *gomock.Controller) *MockApiServer {
	mock := &MockApiServer{ctrl: ctrl}
	mock.recorder = &MockApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiServer) EXPECT() *MockApiServerMockRecorder {
	return m.recorder
}

// CreateRoleV1 mocks base method.
func (m *MockApiServer) CreateRoleV1(arg0 context.Context, arg1 *ocp_role_api.CreateRoleV1Request) (*ocp_role_api.CreateRoleV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleV1", arg0, arg1)
	ret0, _ := ret[0].(*ocp_role_api.CreateRoleV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleV1 indicates an expected call of CreateRoleV1.
func (mr *MockApiServerMockRecorder) CreateRoleV1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleV1", reflect.TypeOf((*MockApiServer)(nil).CreateRoleV1), arg0, arg1)
}

// DescribeRoleV1 mocks base method.
func (m *MockApiServer) DescribeRoleV1(arg0 context.Context, arg1 *ocp_role_api.DescribeRoleV1Request) (*ocp_role_api.DescribeRoleV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoleV1", arg0, arg1)
	ret0, _ := ret[0].(*ocp_role_api.DescribeRoleV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoleV1 indicates an expected call of DescribeRoleV1.
func (mr *MockApiServerMockRecorder) DescribeRoleV1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoleV1", reflect.TypeOf((*MockApiServer)(nil).DescribeRoleV1), arg0, arg1)
}

// ListRolesV1 mocks base method.
func (m *MockApiServer) ListRolesV1(arg0 context.Context, arg1 *ocp_role_api.ListRolesV1Request) (*ocp_role_api.ListRolesV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesV1", arg0, arg1)
	ret0, _ := ret[0].(*ocp_role_api.ListRolesV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesV1 indicates an expected call of ListRolesV1.
func (mr *MockApiServerMockRecorder) ListRolesV1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesV1", reflect.TypeOf((*MockApiServer)(nil).ListRolesV1), arg0, arg1)
}

// RemoveRoleV1 mocks base method.
func (m *MockApiServer) RemoveRoleV1(arg0 context.Context, arg1 *ocp_role_api.RemoveRoleV1Request) (*ocp_role_api.RemoveRoleV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleV1", arg0, arg1)
	ret0, _ := ret[0].(*ocp_role_api.RemoveRoleV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoleV1 indicates an expected call of RemoveRoleV1.
func (mr *MockApiServerMockRecorder) RemoveRoleV1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleV1", reflect.TypeOf((*MockApiServer)(nil).RemoveRoleV1), arg0, arg1)
}

// mustEmbedUnimplementedOcpRoleApiServer mocks base method.
func (m *MockApiServer) mustEmbedUnimplementedOcpRoleApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOcpRoleApiServer")
}

// mustEmbedUnimplementedOcpRoleApiServer indicates an expected call of mustEmbedUnimplementedOcpRoleApiServer.
func (mr *MockApiServerMockRecorder) mustEmbedUnimplementedOcpRoleApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOcpRoleApiServer", reflect.TypeOf((*MockApiServer)(nil).mustEmbedUnimplementedOcpRoleApiServer))
}
